[
["index.html", "Interactive data visualization Preface Why read this book Structure of the book Software information and conventions Acknowledgments", " Interactive data visualization John D. Lee 2018-07-06 Preface This book provides an introduction to ggplot2 for interactive data visualization. Its intent is to provide examples of common graphs and basic visualization principles. Minard’s plot shows the deaths of almost 300,000 troups as they march to Moscow demonstrates the horror of war, and is considered one of the best visualizations ever producced (Tufte 1983). Reasons why this graph is so effect is that it has a clear purpose, it answers important questions with a comples array of data that are presented in an understandable and aesthetically pleasing manner. FIGURE .: Minards visualization of Napoleon’s disastrous march to Moscow Why read this book The aim of this book is help people make more graphs like Figure .). It links principles of graph design to examples that are implemented in R, particularly the popular graphic package ggplot2. The book provides a catalog of graphs and their design rationale organized around general questions that graphs are typically used to answer. Structure of the book Chapter 1 introduces R and the tidyverse functions and provides links for learning more about the basic capabilties of R. Chapters 3 - 8 each describe different types of graphs that answer questions regarding association, distribution, comparison, proportion, fluctionation, and connection. Chapter 9 briefly considers graphical elements in tables and Chapters 10 - 11 discuss interactive graphs and adjustments neeed for publication. Software information and conventions I used the knitr package (Xie 2015) and the bookdown package (Xie 2018) to compile the book. Most graphs have been created with ggplot2 [@{Wickham2016a] and data manipulation is done with dplyr. Acknowledgments References "],
["about-the-author.html", "About the Author", " About the Author John D. Lee is a professor in the Department of Industrial and Systems Engineering at the University of Wisconsin-Madison. He has investigated the issues of human-automation interaction, particularly trust inautomation, for over 20 years. More specifically, his research considers trust and acceptance, as well as issues of distraction and engagement. He helped to edit the Handbook of Cognitive Engineering, which focusses on human interaction with increasingly autonomous systems. He is also a co-author of a popular textbook: Designing for People: An introduction to human factors engineering (http://designing4people.com). "],
["Introduction.html", "Chapter 1 Introduction: Purposes, questions, and audiences 1.1 Seeing meaning rather than numbers 1.2 Seeing more than summary statistics 1.3 Purpose and audience of visualizations 1.4 What question to answer? 1.5 Storytelling with graphics 1.6 Data", " Chapter 1 Introduction: Purposes, questions, and audiences Information technology has brought large volumes of data that the promise of deeper understanding the challenges most central to our individual and collective existance. Often this promise is not kept and data overwhelms rather than informs. Well-crafted visualization can make data meaningful. This book provides principles and examples for data visualization Provides ways of addressing common challenges: remove legend (Section 10.2.7) reorder categories of a bar chart or facets Creating Tufte inspired styles (Section 5.3.4) 1.1 Seeing meaning rather than numbers Figure 1.1 shows a typical report of a medical diagnostic test. The numerical summary shows the patient’s values and the range of standard values. The information is there to show if a patient is dangerously outside the range, but a quick glance at the table might miss these indications. Even a careful reading of the table might miss warning signs, particularly if the critical information is in the trend that requires looking at a second table on another tab. Figure 1.2 shows the data relative to the high and low normal range and makes deviations much more apparent. The ghosted points show past results and roughly indicate trends. FIGURE 1.1: A typical report of a medical test makes finding deviations from the normal range difficult. FIGURE 1.2: A visualization of the same results makes the deviations pop out. 1.2 Seeing more than summary statistics The easy availability of sophisticated machine learning and statistical models makes algorithmic interpretation of data tempting. However, such interpretations can mislead, with similar outcomes produced by very different underlying data. Figure 1.3 shows four distinct sets of data. The differences are obvious when graphed. One might expect that the typical summary statistics–mean, standard deviation, and correlation–would show equally stark differences. Table ?? shows this is not the case. Each data set has the same summary statistics. FIGURE 1.3: The Anscombe quartet and the limits of summary statistics. set mean.y sd.y cor Set 1 7.501 2.032 0.8164 Set 2 7.501 2.032 0.8162 Set 3 7.500 2.030 0.8163 Set 4 7.501 2.031 0.8165 1.3 Purpose and audience of visualizations Explore, inform, and engage (Gelman and Unwin 2013a) Target audience: yourself, peers, scientists and engineers, public (NYTimes ref) Explore: the answer is unknown and audience is likely yourself and peers involved in the research Inform: the answer is known and the audience is likely a broader audience of scientists, engineers, or manager not direclty involved in the research. Engage: the answer is known and must be communicated in an entertaining way to those who may might neet to be drawn into readin the graph and may not be familiar with conventions of scientific visualization, such as box plots. 1.4 What question to answer? 1.5 Storytelling with graphics High-level principles for communication, such as “Show don’t tell” Role of annotation in going beyond the data: direct attention and explain, as in Table 3.1. Based on https://www.rdocumentation.org/packages/HistData/versions/0.8-4/topics/Minard 1.6 Data This book is not about data reduction and data wrangling. The tidyverse provides an intrgrated set of tools for data wrangling http://r4ds.had.co.nz. This book uses data from the following sources: https://www.kaggle.com https://www.data.gov Consumer complaint database, NTSB accident database https://flowingdata.com/category/projects/data-underload/ http://www.wolframalpha.com R packages: HistData, babynames Time use survey https://cran.r-project.org/web/packages/atus/atus.pdf O*NET occupational information: knowledge, skills, abilties, task composition Yao about data and web scraping and the package ## Read data from website # sports &lt;- read_tsv(&quot;https://github.com/halhen/viz-pub/raw/master/sports-time-of-day/activity.tsv&quot;) ## Happiness happiness.df = read.csv(&quot;data/world-happiness-report/2017.csv&quot;) highlight.df = happiness.df %&gt;% filter( Economy..GDP.per.Capita.&gt;1.75| Happiness.Score&gt;7.4| (Happiness.Score&gt;5&amp;Economy..GDP.per.Capita.&lt;.5)| (Happiness.Score&gt;6&amp;Economy..GDP.per.Capita.&lt;1)| Country==&quot;United States&quot;) ggplot(happiness.df, aes(Economy..GDP.per.Capita., Happiness.Score)) + geom_point(colour = &quot;grey25&quot;) + geom_point(data = highlight.df, color = &quot;orange&quot;)+ geom_text_repel(data = highlight.df, aes(label = Country))+ labs(title = &quot;Money doesn&#39;t buy happiness, but it helps&quot;, subtitle = &quot;Source: https://www.kaggle.com/unsdsn/world-happiness 2017&quot;, y = &quot;Happiness&quot;, x = &quot;Per capita GDP&quot;) ## Chocolate # chocolate.df = read.csv(&quot;flavors_of_cacao.csv&quot;) # chocolate.df$Cocoa.Percent = as.numeric(chocolate.df$Cocoa.Percent) # ggplot(chocolate.df, aes(Cocoa.Percent, Rating)) + geom_point() ## Police ## 2535 observations, Age, gender, how armed, state, threat, body cameraAll factors police.df = read.csv(&quot;data/PoliceKillingsUS.csv&quot;) # Canadian vehicle specifications: http://www.carsp.ca/research/resources/safety-sources/canadian-vehicle-specifications/ References "],
["Principles.html", "Chapter 2 Visualization types and principles 2.1 Pairing questions and graph types 2.2 Percpetual processes to be supported: Comparison, Detection, Pattern identification 2.3 Principles from general to specific 2.4 Overview of examples", " Chapter 2 Visualization types and principles 2.1 Pairing questions and graph types Graphs answer questions about data by showing relationships and making comparisons easier. Before creating a graph it is critical to specify the questions and comparisons of interest. Figure ?? shows common graphs and general questions they might answer. For example, in the upper left is a graph that shows the association between variables. This type of graph answers questions such as “how does X influence Y?”, as in “does increasing the prices of gas reduce the amount of driving?”. A scatter plot shows the strength and nature of this association. Each graph in Figure ?? is suited to a different question: Graphs answer questions about data by showing relationships and making comparisons easier. Before creating a graph it is critical to specify the questions and comparisons of interest. Table shows common graphs and general questions they might answer. For example, in the upper left is a graph that shows the association between variables. This type of graph answers questions such as how does X influence Y, as in ``does increasing the prices of gas reduce the amount of driving?’’. A scatter plot shows the strength and nature of this association. Association: What influences an outcome? Distribution: What is the spread of the observations? Comparision: How does one condition differ from another? Proportion: What is the size of the components that make up the whole? Fluctuation: How does the do observations vary over time? Connection: How are the observations connnected over a map or network? Combinations of questions, such as changes in distribution or proportion over time Questions in terms of patterns vs precision Graph type and familiarity, pie charts Scatter plot to 2-density, comparison to ranking, dotplot to violin or boxplot. Graph types and volume of data. More data requires abstraction. Some plots scale well others do not, overplotting one example of scaling challenges with increasingly large data. More data points and more variables (e.g., time sequences, categories), organize chapters to move from few points and few variables to many (e.g., histogram to small multiple, to heatmap) Types of data sets: Number of observations (independent, sequential) Number variables (nominal, ordinal, interval) ~50 observations and 5 nominal and 7 interval variables (mtcars, IIHS vehicle fatalities) ~50 observations and 1 nominal and 4 interval variables (iris) ~200 observations and 2 nominal and interval variables (10) (belts) ~50,000 observations an 10 nominal and interval variables (diamonds) The examples for each type of graphs represent one of many possible representations. For example, the stacked bar chart addresses questions of proportion, but so can pie charts and 3-D pie charts. How do you choose between these alternatives? One consideration is to select display dimensions that make it easy for people to make comparisons needed to answer the questions—identify effective mapping between data and display dimensions—which we turn to in the following section. 2.2 Percpetual processes to be supported: Comparison, Detection, Pattern identification Attentional span Visual WM limits Preattentive cues Compatability Conventions and familiarity 2.2.1 Comparison Differences between conditions, Compare to zero? Perceptual sensitivity Proximity compatibility principle (enable relative rather than absolute comparisons with reference lines and data ordering) 2.2.2 Detection Outliers, deviations from assumptions Popout effects TODO Create figure to show cost of conjunctive search and benefit of redundant coding 2.2.3 Pattern identification Associations, interactions, and changes over time Gestalt principles Preattentive processing TODO Create figure to show relative benefit of shape, intensity color for grouping Grouping and gestalt Similarity Continuity Connection Proximity Enclosure Closure TODO Figure ground showing data and summary vs summary and data 2.3 Principles from general to specific (Tufte 1983), (Munzner 2014, Gelman and Unwin (2013b)) ten guidelines (Kelleher and Wagener 2011) Guidelines for HF publications (Gillan et al. 1998) Comprehensive book on visualization (Ware 2013) Effort to separate and effort to integrate–focussed and selective attention 2.3.1 Identify audience, story, and key relationships (Few) 2.3.2 Focus attention and organize reading Group Prioritize Provide context Sequence Be consistent, every difference should tell 2.3.3 Annotate to show cause and explain why 2.3.4 Concrete details engage and are memorable Connect to the world 2.3.5 Enable comparisons and put data in context (Tufte) Scatter plot: Data points with linear and loess models Category plot: Boxplot with individual data points Time series: Small multiples with grand mean Estimation errors and effort proportional to the absolute difference from common baseline: reference lines provide a local baseline. TODO Show tall bars with mean reference line 2.3.6 Map types of variables to graph features Mapping data to graph features (Cleveland and McGill 1985) For the purposes of display design, three different data types guide the choice of display dimensions: interval, ordinal, and nominal (Cleveland and McGill 1985). Interval data include real or integer numbers (e.g., height and weight), ordinal data are categories that have a meaningful order (e.g., compact, mid-size, and full-size cars), and nominal data are categories that have no order (e.g., male, female). Each data type can be represented with one of several graph dimensions, such as color or position, but certain mapping support more accurate judgments. Size of circle: map to radius or the area TODO create plot to show map to radius and area TODO show good and bad mappings color (Silva, Sousa Santos, and Madeira 2011) data = read.csv(&#39;data/DataAestheticMapping.csv&#39;) data$Type = factor(data$Type, levels=c(&quot;Interval&quot;, &quot;Ordinal&quot;, &quot;Nominal&quot;)) ggplot(data, aes(Type, reorder(Rank, -Rank), group = Aesthetic)) + geom_line(alpha = .4, size = 2.5) + geom_text(aes(label = Aesthetic), size = 5) + ylab(&quot;Rank&quot;) + xlab(&quot;Data type&quot;) + theme_bw() FIGURE 2.1: Aesthetic mapping. %TODO figure for mapping types of data and graph dimensions (Cleveland and McGill 1985) Figure XX shows seven ways to code these data (Cleveland and McGill 1985). For all three types of data, position, such as the horizontal or vertical placement of a point in a graph, support the most precise judgments. The other ways of coding information depend on the type of data: hue is a poor choice for interval data, but a good choice for nominal data, as is shape. Because shape and color have no natural mapping to magnitude, they are a poor choice for interval and ordinal data. Magnitude is best represented by position on a common scale, followed by position on an unaligned scale, length and then angle, followed by size (Munzner 2014, Cleveland and McGill (1985)). Because size and angles are relatively hard to judge, pie charts are not a good way to represent proportions. Limits of absolute judgment underlie the effectiveness of coding data with various display dimensions. Coding nominal data with more than seven hues will exceed people’s ability and so they would not be able to reliably link lines on a graph to categories. Data presented on aligned scales, such as the bottom category in a stacked bar chart, can be judged very precisely, but the limits of absolute judgment make interpreting the upper categories more difficult. This means that the bottom category of a stacked bar chart should be chosen carefully. Generally, avoid placing data on unaligned scales. Instead, support relative judgments based on a common scale. The circular format of pie charts means that there are no aligned scales and is another reason why they are not as effective as stacked bar charts. Because visualization involves multiple conceptual dimensions, a natural choice is to use three-dimensional Euclidian space. However, three-dimensional figures make accurate comparisons difficult due the ambiguity of rendering three dimensions on a two dimensional plane. Of all the ways to represent a quantity, the volume of a three-dimensional object leads to the most inaccurate judgments (Munzner 2014). Another important conceptual dimension is time. Time, like space, is compatibly mapped to display dimension of position, often advancing from left (past) to right (future). Time can also be directly mapped to display time via animation. Animated graphs can be compelling, but they require working memory to track objects across the display and so severely limit the number of data points that can be compared. Interactive visualization described in Chapter 10 can give control with a slider and avoids this limit to some degree. 2.3.7 Ensure proximity compatibility Proximity compatibility and legend: link to line, orientate to match orientation in graph, sequence to match sequence in graph Visual attention must sometimes do a lot of work, traveling from place to place on the graph, and this effort can hinder graph interpretation. Hence, it is important to construct graphs so things that need to be compared (or integrated) are either close together in space or can be easily linked perceptually by a common visual code. This, of course, is a feature for the proximity compatibility principle (A3) and can apply to keeping legends close to the lines that they identify, rather than in remote captions or boxes. Similarly, when the slopes and intercepts of two lines need to be compared, keep them on the same panel of a graph rather than on separate panels. The problems of low proximity will be magnified as the graphs contain more information—more lines. Similarly, in a box plot with many categories people will be able to compare categories that are close to each other more precisely than those that are separated. You should order categories so that those to be compared are closest. Proximity goes beyond physical distance. A line linking points on a timeline can enhance proximity as can color and shape. Lines and color can be effective ways of making groups of points in a network diagram ``closer’’, and easier to interpret as a group. Objects with identical colors tend to be associated together, even when they are spatially separated. Furthermore a unique color tends to stand out. It is also the case that space is compatibly mapped to space, so that visualization of geographic areas is best accomplished when the dimensions of rendered space correspond to the dimensions of displayed space–a map. As with its application to other display designs, the proximity compatibility principle means that the visual proximity of elements of the graph need to correspond to the mental proximity needed to interpret this information. For graphs, this means the questions and comparisons the graph is intended to address should specify what is ``close’’ in the graph. 2.3.8 Legibility and consistency As with other types of displays, issues of legibility are again relevant. However, in addition to making lines and labels large enough to be readable, a second critical point relates to discriminability (P9). Too often, lines that have very different meanings are distinguished only by points that are highly confusable, as in the graph on the left of Figure XX. Here incorporating redundant coding of differences can be quite helpful. In modern graphics packages, color is often used to discriminate lines, but it is essential to use color coding redundantly with another salient cue. Why? As we noted in Chapter 4, not all viewers have good color vision, and a non-redundant colored graph printed from a black and white printer or photocopied may be useless. 2.3.9 Maximize data/ink ratio (Tufte) * Maximize data to create rich representation, minimize extraneous non-data elements Minimize non-data elements: bar charts rather than 3-D pie Annotate to integrate interpretation and data Simplify to amplify content Simplify content to amplify point 2.3.10 Manage clutter with grouping and layering Match data type to appropriate aesthetics (Cleveland) Only position good for all data types: Focus on 2d-plane and relative judgments Consider data type: size better than color for interval data Graphs can easily become cluttered by presenting more lines and marks than the actual information they convey. As we know, clutter can be counterproductive , and this has led some to argue that the data-ink ratio should always be maximized (Tufte 1983); that is, the greatest amount of data should be presented with the smallest amount of ink. While adhering to this guideline is a valuable safeguard against the excessive ink of “chart junk” graphs, such as those that unnecessarily put a 2-D graph into 3-D perspective, the guideline of minimizing ink can however be counterproductive if carried too far. Thus, for example, the ``minimalist’’ graph in center of Figure X, which maximizes data-ink ratio, gains little by its decluttering and loses a lot in its representation of the trend, compared to the line graph on the right Figure XX. The line graph contains an emergent feature—slope—which is not visible in the dot graph. The latter is also much more vulnerable to the conditions of poor viewing (or the misinterpretation caused by the dead bug on the page!). %Figure 21. Space shuttle launches, temperature and O-ring damage. %TODO I love the example, but A more elaborated caption is needed to direct reader’s attention to the problem. In some cases, the poor data to ink ratio and prevalence of chart junk might create engaging graphics, other times it can be annoying, but in presenting engineering data it can undermine the quality of life and death decisions. Figure 20 shows the graphic used to support the launch decision associated with the disastrous flight of the Space Shuttle Challenger the data presented in this way makes it difficult to assess the effect of temperature on O-ring damage, which may have encouraged the managers to launch in cold weather (Tufte 1997). Figure X shows that you can increase the data-to-ink ratio by reducing the ``ink’’ devoted to non-data elements. Another way to increase the data-to-ink ratio is to include more data. More data can take the form of reference lines and multiple small graphs, as in Figure XX. More data can also take the form of directly plotting the raw data rather than summary data. Figure 2.2 shows an extreme version, in which each data point represents one of approximately 693,000 trips reported in the 2009 travel survey XXcite FHWA2011. The horizontal axis indicates the duration and the vertical axis shows distance of each trip. The diagonal lines of constant speed place these data in context by showing very slow trips—those under the 3mph line—and very fast trips—those over the 90mph line. Histograms at the top and side show the distribution of trip duration and distance. The faint vertical and horizontal lines show the mean duration and distance. Like other visualizations that include the raw data, this visualization shows what is behind the summary statistics, such as mean trip distance and duration. Showing the underlying data has the benefit of providing a more complete representation, but it can also overwhelm people. Data can create clutter. One way to minimize clutter is by grouping and layering the data. In the case of Figure 2.2 this means making the individual data points small and faint. FIGURE 2.2: An example of extreme data-to-ink with over 693,000 data points 2.4 Overview of examples Simple, few variables, few observations and single graphical element to and complex, many observations to combitions of graphical elements References "],
["Association.html", "Chapter 3 Association–scatterplots 3.1 Basic elements of the grammar of graphics 3.2 Simple scatterplot 3.3 Scatterplot with additional mappings 3.4 Scatterplot with linear and loess fit 3.5 Global and local regression 3.6 Quantile regression and other functional relationships 3.7 Scatterplot with regression equation and marginal distributions 3.8 Categorical scatterplot 3.9 Table lens 3.10 Scatterplot with overplotting mitigation 3.11 A matrix of scatterplots", " Chapter 3 Association–scatterplots 3.1 Basic elements of the grammar of graphics TABLE 3.1: Summary of ggplot element. ggplot element Description Data ggplot uses a dataframe as input (e.g., data = mtcars.data) Geoms geometric element (e.g., geom_point, geom_bar) Mapping links data variables to aesthetic dimensions (aes) (e.g., aes(x = cyl, y = mpg)) Setting specifies value of aesthetic dimension directly (e.g., colour = “blue”) Layers add components to base plot, most often geoms (additional layers added with “+”) Stats statistical summary, such as density or count; each geom has a default statistic Position adjusts the location of the plotted geom Annotations text and graphical overlays Coordinate system Cartesian, polar or small multiple facets Themes sets of plot parameters (e.g., font, background) 3.2 Simple scatterplot The simplest plot must include data, aesthetic mapping, and geom a geometric element. The data must be organized with each observation as a row and each variable as a column. For a scatterplot the geometric element is a point, and the aesthetic mapping links variables to properties of the geometric element. For a scatterplot this would be the x and y position of the point. the the point the x and y position must be specified, but other properties, such as color, size, alpha level, and shape, can be mapped to variables. These properties of the geometric element can also be set to specific values, such as specifying the color of the point. Figure ?? shows the ggplot2 code and associated scatterplot. The equation used to specify the plot implicitly specifies the values by their position, such as data being identifed as following “ggplot(”. The following speciifcations are equivalent: library(tidyverse) mtcars.df = mtcars ggplot(data = mtcars.df, mapping = aes(x = wt, y = mpg)) + geom_point(colour = &quot;darkblue&quot;) A powerful feature of ggplot2 is the abilty to add layers of geometric elements to a plot. Each layer can have its own data, mapping of aesthetic properties, and setting of aesthetic properties. The data and mapping specified in the base plot statement–“ggplot(data = mtcars.df, mapping = aes(x = wt, y = mpg))”–are global and apply to all layers, but can overridden by the any mappings specific to a layer. Figure ?? shows a layer of red circles based on a subset of the data. fourcyl.mtcars.df = mtcars.df %&gt;% filter(cyl==4) ggplot(data = mtcars.df, mapping = aes(x = wt, y = mpg)) + geom_point(colour = &quot;darkblue&quot;) + geom_point(data = fourcyl.mtcars.df, colour = &quot;red&quot;, shape = 21, size = 4) 3.3 Scatterplot with additional mappings The scatterplot typically maps variables to the x and y position of the points, but ggplot allows for other mappings. Figure ?? shows mapping variables to the fill and size of the points. The shape, stroke, and color of the points are set to values they could also be mapped, which could quickly overload the graph. Note that only shapes 21-25 in Figure ?? can include fill and stroke, with the other symbols color determines the color of the whole symbol not just the border. ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, fill = hp, size = 1/qsec)) + geom_point(shape = 21, colour = &quot;darkred&quot;, stroke = 2.) library(RColorBrewer) display.brewer.all(type=&quot;qual&quot;) display.brewer.all(type=&quot;seq&quot;) display.brewer.all(type=&quot;div&quot;) # display.brewer.all(n=NULL, type=&quot;all&quot;, # select=NULL, exact.n=TRUE, # colorblindFriendly=FALSE) 3.4 Scatterplot with linear and loess fit The layers can include geometric elements beyond geom_point. Perhapts the most useful geoms to add to a scatterplot is a curve fit. Figure ?? shows a simple scatterplot with two cruve fits. The loess fit shows a smooth fit that indicates non-linar trends, and the blue line shows a linear regeression. The loess line highligths areas in the data that deviate from a linear relationship shown by the blue line. All three layers inherit the same x and y mapping from the ggplot base layer. When building a plot each layer is placed on top of the preceding layer, such that the last layer lies on top of all the others. With Figure ??, the points are on the bottom and the light blue line is on top of the gray loess line. Table ?? shows the full set of possible geometric elements that can be used to create graphs, the following chapters describe many of these. Note the smooth fit geoms include additional settings for the method and whether the line should include a standard error. ggplot(data = mtcars.df, aes(x = wt, y = mpg)) + geom_point(colour = &quot;darkblue&quot;) + geom_smooth(method = &quot;loess&quot;, se = FALSE, colour = &quot;darkgrey&quot;) + geom_smooth(method = &quot;lm&quot;, fill = &quot;lightblue&quot;) x geom_abline geom_area geom_bar geom_bin2d geom_blank geom_boxplot geom_col geom_contour geom_count geom_crossbar geom_curve geom_density geom_density_2d geom_density2d geom_dotplot geom_errorbar geom_errorbarh geom_freqpoly geom_hex geom_histogram geom_hline geom_jitter geom_label geom_line geom_linerange geom_map geom_path geom_point geom_pointrange geom_polygon geom_qq geom_qq_line geom_quantile geom_raster geom_rect geom_ribbon geom_rug geom_segment geom_sf geom_smooth geom_spoke geom_step geom_text geom_tile geom_violin geom_vline 3.5 Global and local regression ggplot(data = mtcars.df, aes(x = wt, y = mpg)) + geom_smooth(method = lm, colour = &quot;darkgrey&quot;, size = .5) + geom_point(aes(colour = as.factor(cyl))) + geom_smooth(aes(colour = as.factor(cyl)), method = lm, se = FALSE) 3.6 Quantile regression and other functional relationships Often the question the graph is meant to answer is not about the central tendency, but about the likelihood of relatively extreme values, such as the 25th and 75th percentiles. ggplot(data = mtcars.df, aes(x = wt, y = mpg)) + geom_smooth(method = lm, colour = &quot;darkgrey&quot;, size = .5) + geom_point() + geom_quantile(quantiles = c(.25, .75)) ## Smoothing formula not specified. Using: y ~ x 3.7 Scatterplot with regression equation and marginal distributions Scatterplot augmented with marginal distributions, regression equation, and Tufte-inspired range frame. Marginal distributions show that a 1-D scatterplot is a histogram and that a 2-d histogram is a scatterplot. Chapter 4 describes such plots in detail. Chapter 10 shows how to add annotations, such as the equation. Derived from: http://t-redactyl.io/blog/2016/05/creating-plots-in-r-using-ggplot2-part-11-linear-regression-plots.html library(ggthemes) library(ggExtra) # For marginal histograms mtcars.df = mtcars equation = function(x) { lm_coef &lt;- list(a = round(coef(x)[1], digits = 2), b = round(coef(x)[2], digits = 2), r2 = round(summary(x)$r.squared, digits = 2)); lm_eq &lt;- substitute(italic(y) == a + b %.% italic(x)*&quot;,&quot;~~italic(R)^2~&quot;=&quot;~r2,lm_coef) as.character(as.expression(lm_eq)); } fit = lm(mpg~wt, data = mtcars.df) p = ggplot(mtcars.df, aes(x=wt, y=mpg)) + geom_point(colour = &quot;darkblue&quot;) + geom_smooth(method=lm, se=FALSE) + annotate(&quot;text&quot;, x = 4, y = 30, label = equation(fit), parse = TRUE) + geom_rangeframe() + # Requires ggthemes theme_minimal() p = ggMarginal(p, type = &quot;histogram&quot;) p 3.8 Categorical scatterplot mtcars.df = mtcars mtcars.df$gear = as.factor(mtcars.df$gear) mtcars.df$am = as.factor(mtcars.df$am) ggplot(mtcars.df, aes(gear, am)) + geom_count() ggplot(mtcars.df, aes(gear, am)) + geom_jitter(width = 0.075, height = 0.075) s.mtcars.df = mtcars.df %&gt;% group_by(gear, am) %&gt;% summarise(count = n()) ggplot(s.mtcars.df, aes(gear, am)) + geom_tile(aes(fill = count)) 3.9 Table lens Table lens serves a similar purpose to the scatterplot but might be more familiar and focusses attention on individual variables and individual cases. Chapter 9 provides more detail on this technique. 3.10 Scatterplot with overplotting mitigation diamonds.df = diamonds ggplot(diamonds.df, aes(carat, price)) + geom_point() ggplot(diamonds.df, aes(carat, price)) + geom_point(size = .1) ggplot(diamonds.df, aes(carat, price)) + geom_point(size = .3, shape = 21) ggplot(diamonds.df, aes(carat, price)) + geom_point(size = .3, shape = 21, alpha = .3) ggplot(diamonds.df %&gt;% sample_n(10000), aes(carat, price)) + geom_point(size = .3, shape = 21, alpha = .3) ggplot(diamonds.df, aes(log(carat), log(price))) + geom_point(size = .3, shape = 21, alpha = .3) ggplot(diamonds.df, aes(log(carat), log(price))) + geom_count(show.legend=F, alpha =.3, shape =21) ggplot(data = mtcars.df, aes( x = disp, y = hp)) + geom_point(colour = &quot;grey40&quot;, shape = 21)+ geom_smooth(method = loess, colour = &quot;grey40&quot;)+ geom_smooth(method = lm, se = FALSE, size = .75) + geom_smooth(aes(colour = factor(cyl)), method = lm, se = FALSE, size = 1.5) 3.11 A matrix of scatterplots ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; ## [8] &quot;vs&quot; &quot;am&quot; &quot;gear&quot; &quot;carb&quot; "],
["Distribution.html", "Chapter 4 Distribution–histograms and density plots 4.1 Histograms and bin choice 4.2 Density and kernel adjustment 4.3 Histogram percentage rather than count 4.4 Histogram, density overlay, and normal overlay 4.5 Cummulative density 4.6 Quantile-quantle plot 4.7 Cummulative density 4.8 Distribution: 2-D distribution and overplotting revisited 4.9 Histogram with density and median reference line 4.10 Ridge plot–An array of density plots", " Chapter 4 Distribution–histograms and density plots library(tidyverse) library(HistData) library(ggpubr) 4.1 Histograms and bin choice Seeing the smooth and rough of data bins or binwidth, default number of bins is 30 h10.plot = ggplot(data = diamonds.df, aes(price)) + geom_histogram(bins = 10) h30.plot = ggplot(data = diamonds.df, aes(price)) + geom_histogram(bins = 30) h80.plot = ggplot(data = diamonds.df, aes(price)) + geom_histogram(bins = 80) ggarrange(h10.plot, h30.plot, h80.plot, nrow=1, ncol = 3, align = &quot;h&quot;) 4.2 Density and kernel adjustment Density as abstraction and model Adjust is a multiplier on the default kernel bandwidth and so 1 represents the default a10.plot = ggplot(data = diamonds.df, aes(price)) + geom_density(adjust = 10) a1.plot = ggplot(data = diamonds.df, aes(price)) + geom_density(adjust = 1) a01.plot = ggplot(data = diamonds.df, aes(price)) + geom_density(adjust = 0.1) ggarrange(a10.plot, a1.plot, a01.plot, nrow=1, ncol = 3, align = &quot;h&quot;) 4.3 Histogram percentage rather than count ggplot(mtcars.df , aes(x = as.factor(cyl))) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels = percent) 4.4 Histogram, density overlay, and normal overlay 4.5 Cummulative density diamonds.df = diamonds ggplot(diamonds.df, aes(price, colour = cut)) + stat_ecdf(geom = &quot;step&quot;) 4.6 Quantile-quantle plot Plots quantiles of sample as a function of the quantiles of the theoretical distribution. ggplot(diamonds.df, aes(sample = price)) + geom_qq(distribution = qlnorm) + geom_abline(intercept = mean(diamonds.df$price), slope = sd(diamonds.df$price)) 4.7 Cummulative density ggplot(diamonds.df, aes(price, colour = cut)) + stat_ecdf(geom = &quot;step&quot;) 4.8 Distribution: 2-D distribution and overplotting revisited ggplot(diamonds.df, aes(log(carat), log(price)))+ geom_point(alpha = .01)+ theme_bw() ggplot(diamonds.df, aes(log(carat), log(price)))+ geom_point(size = .5)+ geom_density2d(size=1.2)+ theme_bw() ggplot(diamonds.df, aes(log(carat), log(price)))+ geom_point(size = .5)+ geom_density2d(size=1.2)+ geom_hex(alpha = .6) + theme_bw() ggplot(diamonds.df, aes(log(carat), log(price)))+ #geom_point( )+ #geom_point(size = .5)+ #geom_density2d(size=1.2)+ geom_hex(bins = 50) + theme_bw() 4.9 Histogram with density and median reference line TODO change to diversity data gender across job types diamonds.df = diamonds sum.diamonds.df = diamonds.df %&gt;% group_by(cut) %&gt;% summarise(q85 = quantile(price, 0.85)) ggplot(data = diamonds.df, aes(price)) + geom_histogram(aes(y = ..density..), bins = 40) + geom_density(colour = &quot;darkblue&quot;) + geom_vline(data = sum.diamonds.df, aes(xintercept = q85)) + facet_grid(cut ~ .) 4.10 Ridge plot–An array of density plots https://cran.r-project.org/web/packages/ggridges/vignettes/gallery.html library(ggridges) library(ggplot2movies) movies %&gt;% filter(year&gt;1912, length&lt;250) %&gt;% ggplot(aes(x = length, y = year, group = year)) + geom_density_ridges(scale = 10, size = 0.25, rel_min_height = 0.03, alpha=.75) + scale_x_continuous(limits=c(0, 250), expand = c(0.01, 0)) + scale_y_reverse(breaks=c(2000, 1980, 1960, 1940, 1920, 1900), expand = c(0.01, 0)) + theme_ridges() ## Picking joint bandwidth of 6.89 "],
["Comparison.html", "Chapter 5 Comparison–barchart and boxplots 5.1 Graph considerations for communication: aggregation, abstraction, complexity 5.2 Comparing distributions, box, violyn, and sina plot 5.3 Comparing across many variables 5.4 Gliphs: Chernof face and radar plots", " Chapter 5 Comparison–barchart and boxplots 5.1 Graph considerations for communication: aggregation, abstraction, complexity 5.1.1 Simple bar chart library(tidyr) library(ggforce) library(ggthemes) library(ggstance) mtcars.df = mtcars mtcars.df = mtcars.df %&gt;% mutate(cyl = as.factor(cyl)) s.mtcars.df = mtcars.df %&gt;% group_by(cyl) %&gt;% summarise(m.hp = mean(hp), se.hp= sd(hp)/n()^.5) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_bar(stat=&quot;identity&quot;) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_col() ## Change order of bars cyl.order &lt;- c(&quot;8&quot;, &quot;6&quot;, &quot;4&quot;) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_col() + scale_x_discrete(limits = cyl.order) 5.1.2 Bar chart with error bars ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_bar(stat=&quot;identity&quot;)+ geom_linerange(aes(ymin=m.hp-2*se.hp, ymax=m.hp+2*se.hp)) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_bar(stat=&quot;identity&quot;)+ geom_linerange(aes(ymin=m.hp-2*se.hp, ymax=m.hp+2*se.hp))+ geom_point(data = mtcars.df, aes(cyl, hp), position = position_jitter(width = .2, height = 0)) 5.1.3 dotplot and offset range plot ## Set seed and create data set.seed(999) df = data_frame(A = runif(12,1,17), B = runif(12, 2, 8)) l.df = gather(df, condition, value) l.df$condition = as.factor(l.df$condition) m.l.df = l.df %&gt;% group_by(condition) %&gt;% summarise(m.value = mean(value, na.rm=TRUE), n= sum(!is.na(value)), sd=sd(value, na.rm=TRUE), sde=sd(value, na.rm=TRUE)/n^.5, ci= 2*sde) m.l.df$n.condition = as.numeric(m.l.df$condition)-.05 ## Plot with offset for mean and error bar ggplot()+ geom_dotplot(data = filter(l.df, condition==&quot;A&quot;|condition==&quot;B&quot;), aes(condition, value), binaxis = &quot;y&quot;, stackdir = &quot;up&quot;)+ geom_linerange(data = filter(m.l.df, condition==&quot;A&quot;|condition==&quot;B&quot;), aes(n.condition, ymin=m.value-ci, ymax=m.value+ci), color=&quot;grey50&quot;) + geom_point(data = filter(m.l.df, condition==&quot;A&quot;|condition==&quot;B&quot;), aes(n.condition, y= m.value), shape = 21, size = 4, fill=&quot;grey&quot;, alpha=.7) + labs(x=&quot;&quot;, y=&quot;&quot;) + ylim(2, 15) ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. 5.1.4 Statistical significance in context ggplot(data = mtcars.df, aes(x = as.factor(cyl), y = hp)) + geom_boxplot(colour = &quot;darkgrey&quot;) + geom_point(stat=&quot;summary&quot;, fun.y = &quot;mean&quot;, size = 6, shape = 1) + geom_pointrange(stat=&quot;summary&quot;, fun.data = &quot;mean_cl_boot&quot;) + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;, binwidth = 1, dotsize = 6,alpha = .3, color = &quot;black&quot;, fill = &quot;red&quot;) + geom_hline(aes(yintercept = mean(hp)), size = 1.2) 5.2 Comparing distributions, box, violyn, and sina plot library(tidyr) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_col()+ geom_linerange(aes(ymin=m.hp-2*se.hp, ymax=m.hp+2*se.hp)) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_col()+ geom_linerange(aes(ymin=m.hp-2*se.hp, ymax=m.hp+2*se.hp))+ geom_point(data = mtcars.df, aes(cyl, hp), position = position_jitter(width = .2, height = 0)) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_point(stat=&quot;identity&quot;, size = 3)+ geom_linerange(aes(ymin=m.hp-2*se.hp, ymax=m.hp+2*se.hp))+ geom_point(data = mtcars.df, aes(cyl, hp), position = position_jitter(width = .2, height = 0)) ## Sina plot ggplot(mpg, aes(as.factor(cyl), hwy))+ geom_sina(aes(color = as.factor(cyl)),size = 1, alpha =.5) + geom_tufteboxplot()+ labs(title = &quot;ggforce: sina plot with Tufte boxplot&quot;) # ggplot(s.mtcars.df, aes(m.hp, m.mpg, colour =as.factor(cyl)))+ # geom_pointrangeh(aes(xmin= m.hp-se.hp, xmax = m.hp+se.hp))+ # geom_pointrange(aes(ymin= m.mpg-se.mpg, ymax = m.mpg+se.mpg))+ # labs(title = &quot;ggstance: horizontal point range&quot;) ggplot(mtcars.df, aes(as.factor(cyl), hp))+ geom_boxplot() ggplot(mtcars.df, aes(as.factor(cyl), hp))+ geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) ggplot(data = s.mtcars.df, aes(x = cyl, y = m.hp)) + geom_violin(data= mtcars.df, aes(cyl, hp))+ geom_point(stat=&quot;identity&quot;, size = 3)+ geom_linerange(aes(ymin=m.hp-2*se.hp, ymax=m.hp+2*se.hp))+ geom_point(data = mtcars.df, aes(cyl, hp), position = position_jitter(width = .2, height = 0), alpha =.6) 5.2.1 Compare empirical and theoretical distribution sum.mtcars.df = mtcars.df%&gt;% group_by(cyl) %&gt;% summarise(m.hp = mean(hp), sd.hp = sd(hp)) ggplot(mtcars.df) + geom_boxplot(aes(as.factor(cyl), hp)) + geom_linerange(data = sum.mtcars.df, aes(x = as.factor(cyl), ymin = m.hp + qnorm(.25)*sd.hp, ymax = m.hp + qnorm(.75)*sd.hp), size = 5, alpha = .25) + geom_point(data = sum.mtcars.df, aes(as.factor(cyl), y= m.hp),size = 6, alpha = .33) 5.2.2 Tufte-inspired minimal bar chart http://motioninsocial.com/tufte/ #TODO replace with better dataset with for more columns library(ggthemes) ggplot(mtcars.df, aes(x=as.factor(cyl))) + geom_bar(width=0.25, fill=&quot;gray&quot;) + scale_y_continuous(breaks=seq(2, 12, 2)) + geom_hline(yintercept=seq(2, 12, 2), colour=&quot;white&quot;, lwd=.5) + theme_tufte(base_size=12, ticks=F, base_family = &quot;Arial&quot;) 5.3 Comparing across many variables 5.3.1 Dot plots and reordering Comparing many mean values #TODO Change to mean sd catepilar plot mtcars.df = mtcars mtcars.df$name = rownames(mtcars.df) ggplot(data = mtcars.df, aes(reorder(name, hp), y = hp, colour = as.factor(cyl))) + geom_point(size = 2) + geom_hline(aes(yintercept = mean(hp)), colour = &quot;darkgrey&quot;) + geom_linerange(aes(ymin= -Inf, ymax= hp), alpha =.5) + coord_flip() + labs(x = &quot;Cylinders&quot;, y = &quot;Power (hp)&quot;) + scale_colour_brewer(name = &quot;Number of \\nCylinders&quot;, palette=&quot;Dark2&quot;) + # http://colorbrewer2.org theme(legend.position = c(.75, .25)) + theme_minimal() 5.3.2 Point range on x and y ## Point range on x and y #library(ggstance) s.mtcars.df = mtcars %&gt;% group_by(cyl) %&gt;% summarise(m.hp = mean(hp), se.hp = sd(hp)/n()^.5, m.mpg = mean(mpg), se.mpg = sd(mpg)/n()^.5) 5.3.3 Tufte boxplot for many variables library(ggthemes) ggplot(mtcars, aes(factor(cyl), mpg)) + geom_tufteboxplot(median.type = &quot;line&quot;, whisker.type = &#39;line&#39;, hoffset = 0, width = 4) + geom_rangeframe() ## Warning: position_dodge requires non-overlapping x ## intervals ## Tufte boxplot ggplot(mtcars, aes(as.factor(cyl), mpg))+ geom_tufteboxplot()+ labs(title = &quot;ggthemes: Tufte boxplot&quot;) ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl)))+ geom_point()+ geom_rangeframe(size = 2, colour = &quot;grey35&quot;)+ labs(title = &quot;ggthemes: Tufte range frame&quot;) 5.3.4 Tufte-inspired slope graphs library(tidyverse) library(ggrepel) # https://github.com/leeper/slopegraph cancer.df = read_csv(&quot;data/tufte-cancer-survival-data.csv&quot;) ## Parsed with column specification: ## cols( ## Type = col_character(), ## `Year 5` = col_double(), ## `Year 10` = col_double(), ## `Year 15` = col_double(), ## `Year 20` = col_double() ## ) l.cancer.df = cancer.df %&gt;% gather(key = year, value = rate, 2:5) l.cancer.df$year = factor(l.cancer.df$year, levels = c(&quot;Year 5&quot;, &quot;Year 10&quot;, &quot;Year 15&quot;, &quot;Year 20&quot;)) ggplot(l.cancer.df, aes(year, rate, group = Type))+ geom_line(colour = &quot;grey70&quot;) + geom_text_repel(data = l.cancer.df %&gt;% filter(year == &quot;Year 5&quot;), aes(label = Type), nudge_x = -.35, direction = &quot;y&quot;, point.padding = .02)+ geom_text_repel(data = l.cancer.df %&gt;% filter(year==&quot;Year 20&quot;), aes(label = Type), nudge_x = .35, direction = &quot;y&quot;, point.padding = .02)+ geom_label(aes(label = rate), colour = &quot;grey55&quot;, label.size = .02)+ theme_void()+ theme(axis.text = element_text(size = rel(.85)), axis.text.y=element_blank()) 5.3.5 Parallel coordinate plot with similar items highlighted Link to network for showing links in multivariate data ## [1] &quot;Fiat 128&quot; ## [1] &quot;Toyota Corolla&quot; 5.4 Gliphs: Chernof face and radar plots Show patterns and outliers not precise comparisons "],
["Proportion.html", "Chapter 6 Proportion–Pie charts and pareto plots 6.1 Pie and bar chart 6.2 Pareto plot: Whole part and and ranking 6.3 Stacked bar chart 6.4 Faceted Bar chart with overall reference distribution 6.5 Rose or Coxcomb plots 6.6 Stacked, dodged, and opposed bar chart 6.7 Likert scale plot 6.8 ternary (triangular) graph 6.9 Treemaps for whole-part of hierarchy 6.10 Circle packing", " Chapter 6 Proportion–Pie charts and pareto plots My picture From wikipedia: “The French engineer Charles Joseph Minard was one of the first to use pie charts in 1858, in particular in maps. Minard’s map, 1858 used pie charts to represent the cattle sent from all around France for consumption in Paris (1858).” Other examples of Minard’s work: https://cartographia.wordpress.com/category/charles-joseph-minard/ 6.1 Pie and bar chart Good pie chart: Few elements, directly labled, alpha for pie pieces Small multiple for pie vs stacked bar likert ratings or time trends library(HistData) library(tidyverse) library(ggpubr) night.df = Nightingale %&gt;% gather(key = cause, value = deaths, Disease:Other) %&gt;% mutate(intervention = ordered( rep(c(rep(&#39;Before&#39;, 12), rep(&#39;After&#39;, 12)), 3), levels=c(&#39;Before&#39;, &#39;After&#39;))) %&gt;% group_by(intervention, Month, cause) %&gt;% summarise(deaths = sum(deaths)) sum.night.df = night.df %&gt;% group_by(cause) %&gt;% summarise(deaths = sum(deaths)) # ## Statistic calculated internally # ggplot(night.df, aes(cause, deaths)) + # geom_bar(stat=&quot;summary&quot;, fun.y = &quot;sum&quot;) # # ## Same plot but with seperately calculated summary # ggplot(sum.night.df) + # geom_bar(aes(reorder(cause, -cause.percent), cause.percent), stat = &quot;identity&quot;) # # ## Horizontal bar # ggplot(sum.night.df) + # geom_bar(aes(reorder(cause, -cause.percent), cause.percent), stat = &quot;identity&quot;) + # coord_flip() pie.plot = ggplot(sum.night.df, aes(x = factor(1), y = deaths, fill = cause)) + geom_bar(width = 1, color=&quot;black&quot;, stat = &quot;identity&quot;) + coord_polar(theta=&quot;y&quot;) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;) stacked.plot = ggplot(sum.night.df, aes(x = factor(1), y=deaths, fill = cause))+ geom_bar(stat = &quot;identity&quot;, position = &quot;stack&quot;) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;) dodged.plot = ggplot(sum.night.df, aes(x =cause, y=deaths, fill = cause))+ geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;) deaths.plot = ggarrange(pie.plot, stacked.plot, dodged.plot, nrow=1, ncol = 3, align = &quot;hv&quot;, common.legend = TRUE) deaths.plot 6.2 Pareto plot: Whole part and and ranking ## Calculate percent and cumulative percent sum.night.df = night.df %&gt;% ungroup() %&gt;% mutate(total.deaths = sum(deaths)) %&gt;% group_by(cause) %&gt;% summarise(cause.percent = 100*sum(deaths)/max(total.deaths)) %&gt;% ungroup() %&gt;% arrange(-cause.percent) %&gt;% mutate(cum.cause.percent = cumsum(cause.percent)) ## Pareto plot: Individual and cummulative proportion ggplot(sum.night.df) + geom_bar(aes(reorder(cause, -cause.percent), cause.percent), stat = &quot;identity&quot;)+ geom_point(aes(reorder(cause, -cause.percent), cum.cause.percent), colour = &quot;red&quot;, size = 3)+ geom_line(aes(reorder(cause, -cause.percent), cum.cause.percent, group = 1), colour = &quot;red&quot;) ggplot(data = sum.night.df) + geom_hline(yintercept = 80) + geom_ribbon(aes(reorder(cause, -cause.percent), ymin = 0, ymax = cum.cause.percent, group = 1), fill = &quot;darkgrey&quot;, alpha =.8) + geom_bar(aes(reorder(cause, -cause.percent), cause.percent), stat = &quot;identity&quot;, width = .8) + geom_point(aes(reorder(cause, -cause.percent), cum.cause.percent), size = 3, colour = &quot;red&quot;) + theme_bw() # ## Pareto plot # mtcars.df = mtcars # sum.mtcars.df = mtcars.df %&gt;% ungroup() %&gt;% # mutate(total.n = n()) %&gt;% group_by(gear) %&gt;% # summarise(gear.percent = 100*max(n())/max(total.n)) %&gt;% ungroup() %&gt;% # arrange(-gear.percent) %&gt;% # mutate(cum.gear.percent = cumsum(gear.percent)) # ggplot(data = sum.mtcars.df) + # geom_hline(yintercept = 80) + # geom_ribbon(aes(reorder(gear, -gear.percent), # ymin = 0, ymax = cum.gear.percent, group = 1), fill = &quot;darkgrey&quot;, alpha =.8) + # geom_bar(aes(reorder(gear, -gear.percent), gear.percent), stat = &quot;identity&quot;, width = .8) + # geom_point(aes(reorder(gear, -gear.percent), cum.gear.percent), size = 3, colour = &quot;red&quot;) 6.3 Stacked bar chart sum.night.df = night.df %&gt;% ungroup() %&gt;% mutate(total.deaths = sum(deaths)) %&gt;% group_by(cause, intervention) %&gt;% summarise(cause.percent = 100*sum(deaths)/max(total.deaths), deaths = sum(deaths)) ## Stacked bar with count: Shows data directly ggplot(sum.night.df, aes(intervention, deaths, fill = cause)) + geom_bar(position = &quot;stack&quot;, stat = &quot;identity&quot;) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;) ## Stacked bar with proportion: Abstracts to proportion ggplot(sum.night.df, aes(intervention, cause.percent, fill = cause))+ geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;) ggplot(sum.night.df, aes(intervention, cause.percent, fill = cause))+ geom_bar(position = &quot;dodge&quot;, stat = &quot;identity&quot;) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;)+ theme_bw() 6.4 Faceted Bar chart with overall reference distribution The grey bars in the background represent the overall distribution and provide a referende for each of the marginal distributions. diamonds.df = diamonds count.diamonds.df = diamonds.df %&gt;% group_by(cut, color) %&gt;% summarise(count = n()) %&gt;% ungroup() %&gt;% group_by(color) %&gt;% mutate(color.count = sum(count)) ggplot(count.diamonds.df, aes(color, count)) + geom_bar(aes(color, color.count), stat = &quot;identity&quot;, alpha =.33) + geom_bar(stat = &quot;identity&quot;, alpha = .8) + facet_grid(cut~.) 6.5 Rose or Coxcomb plots Nightingale produced a graph “Diagram of the Causes of Mortality in the Army in the East” that showed that most soldiers during the Crimean war died of disease rather than wounds. Improving hygiene in March of 1855 led to fewer disease related deaths. This “Diagram of the causes of mortality in the army in the East” was published in Notes on Matters Affecting the Health, Efficiency, and Hospital Administration of the British Army and sent to Queen Victoria in 1858. Coxcombe plot diminishes small values and requires square root transform ggplot(night.df, aes(x = Month, y = deaths, fill = cause)) + geom_bar(width = 1, position = &quot;identity&quot;, color=&quot;black&quot;, stat = &quot;identity&quot;) + scale_y_log10() + coord_polar(start=3*pi/2) + facet_grid(.~intervention) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_bw() ## Warning: Transformation introduced infinite values in ## continuous y-axis ggplot(night.df, aes(Month, deaths, fill = cause)) + geom_bar(stat = &quot;identity&quot;) + facet_grid(intervention~.) + fill_palette(palette = &quot;grey&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;)+ theme_bw() 6.6 Stacked, dodged, and opposed bar chart Comparison of many categories Stacked makes grouping easy Dodge makes comparison easy with common axis and relative judgment Opposing makes gender more apparent ## Diversity in Silicon Valley diversity.df = read.csv(&quot;data/Reveal_EEO1_for_2016.csv&quot;) diversity.df$count = as.numeric(diversity.df$count) gender.diversity.df = diversity.df %&gt;% filter(job_category==&quot;Professionals&quot;, gender==&quot;female&quot;|gender==&quot;male&quot;) %&gt;% group_by(company, gender) %&gt;% summarise(count = sum(count)) %&gt;% group_by(company) %&gt;% mutate(percent = 100*count/sum(count)) %&gt;% mutate(signed.gender = if_else(gender==&quot;female&quot;, -count, count)) stacked.plot = ggplot(gender.diversity.df, aes(reorder(company, count), y=count, fill = gender))+ geom_bar(stat = &quot;identity&quot;) + labs(title = &quot;Stacked&quot;, x = &quot;&quot;) + coord_flip() dodged.plot = ggplot(gender.diversity.df, aes(reorder(company, count), y=count, fill = gender))+ geom_bar(stat = &quot;identity&quot;, position =&quot;dodge&quot;) + labs(title = &quot;Dodged&quot;, x = &quot;&quot;) + coord_flip() opposed.plot = ggplot(gender.diversity.df, aes(reorder(company, count), y=signed.gender, fill = gender))+ geom_bar(stat = &quot;identity&quot;) + geom_bar(stat = &quot;identity&quot;) + scale_y_continuous(labels = abs) + labs(title = &quot;Opposed&quot;, x = &quot;&quot;, y = &quot;count&quot;) + coord_flip() gender.plot = ggarrange(stacked.plot, dodged.plot, opposed.plot, nrow=1, ncol = 3, align = &quot;hv&quot;, common.legend = TRUE) gender.plot 6.7 Likert scale plot library(tidyr) test&lt;-data.frame(Q1=c(10,5,70,5,10), Q2=c(20,20,20,20,20), Q3=c(10,10,10,10,60), Q4=c(35,15,0,15,35), Q5=c(5,10,20,45,20)) test$category &lt;- factor(c(&quot;VeryH&quot;, &quot;H&quot;,&quot;Neutral&quot;, &quot;L&quot;,&quot;VeryL&quot;), levels = c(&quot;VeryL&quot;, &quot;L&quot;, &quot;Neutral&quot;, &quot;H&quot;, &quot;VeryH&quot;)) ## Likert scale plots test[3,1:5] = test[3,1:5]/2 # Divide by two to plot above and below zero test.m &lt;- gather(test, key = question, value = rating, -category) ggplot(test.m, aes(x=question, fill=category)) + geom_bar(data = subset(test.m, category %in% c(&quot;VeryH&quot;,&quot;H&quot;, &quot;Neutral&quot;)), aes(y = rating), position=position_stack(reverse = TRUE), stat=&quot;identity&quot;) + geom_bar(data = subset(test.m, category %in% c(&quot;VeryL&quot;,&quot;L&quot;, &quot;Neutral&quot;)), aes(y = -rating), position=position_stack(reverse = FALSE), stat=&quot;identity&quot;) + geom_hline(yintercept = 0) + scale_fill_manual(breaks = c(&quot;VeryH&quot;, &quot;H&quot;, &quot;Neutral&quot;, &quot;L&quot;,&quot;VeryL&quot;), values=c(&quot;darkgoldenrod2&quot;,&quot;lightblue&quot;, &quot;grey90&quot;,&quot;darkgoldenrod4&quot;,&quot;lightblue4&quot;)) + labs(y = &quot;Percent&quot;, x = &quot;Question&quot;, fill = &quot;&quot;) + ylim(-100,100) + theme_bw() position = position_stack(reverse = TRUE) 6.8 ternary (triangular) graph Shows proportion of three variables that sum to 100 percent. Unfamiliar to most and so can be hard to interpret ggtern 6.9 Treemaps for whole-part of hierarchy Schneiderman library(treemapify) # Include websites # ggplot(G20, # aes(area = gdp_mil_usd, fill = hdi, # label = country, subgroup = region)) + # geom_node_tile() + # geom_treemap_subgroup_border() + # geom_treemap_subgroup_text(place = &quot;centre&quot;, grow = T, alpha = 0.5, colour = # &quot;black&quot;, fontface = &quot;italic&quot;, min.size = 0) + # geom_treemap_text(colour = &quot;white&quot;, place = &quot;topleft&quot;, reflow = T) 6.10 Circle packing The most valuable graphical dimensions of x and y position are wasted in this plot becaue they have no meaning, but it can be engaging library(packcircles) library(viridis) library(tidyverse) library(treemapify) # Show with radius vs area packing = circleProgressiveLayout(G20$gdp_mil_usd, sizetype=&#39;area&#39;) G20.df = cbind(G20, packing) layout = G20.df %&gt;% dplyr::select(country, x, y, radius) dat.pack &lt;- circleLayoutVertices(layout, npoints=60, idcol = 1, xysizecols=2:4, sizetype = &quot;radius&quot;) dat.pack = left_join(dat.pack, G20.df, by = c(&quot;id&quot; = &quot;country&quot;)) ggplot() + geom_polygon(data = dat.pack, aes(x.x, y.x, group = id, fill=as.factor(gdp_mil_usd)), colour = &quot;black&quot;, alpha = 0.6) + geom_text(data = G20.df, aes(x, y, size=gdp_mil_usd, label = country)) + scale_fill_manual(values = magma(nrow(G20.df))) + scale_size_continuous(range = c(1, 4)) + theme_void() + theme(legend.position=&quot;none&quot;) + coord_equal() "],
["Fluctuation.html", "Chapter 7 Fluctuation–timelines 7.1 Multiple time series 7.2 Time series with reference line 7.3 Cycle plot 7.4 Step graph 7.5 Faceted zoom 7.6 Ridge plot 7.7 Stacked area and line graphs 7.8 Temporal heatmap", " Chapter 7 Fluctuation–timelines library(tidyverse) 7.1 Multiple time series two lines on one plot and problems faceting 7.2 Time series with reference line ## Reference lines in time series belts = Seatbelts belts.df = as.data.frame( cbind(Year = round(trunc(time(belts)), 1), Month = cycle(belts), belts)) belts.df$belts.law = as.factor(belts.df$belts.law) belts.DriversKilled.bymonth = belts.df %&gt;% group_by(Month) %&gt;% summarise(mean.DriversKilled = mean(belts.DriversKilled)) ggplot(belts.df, aes(x = Month, y = belts.DriversKilled)) + geom_line(aes(colour = belts.law, group = Year)) + geom_line(data = belts.DriversKilled.bymonth, aes(x = Month, y = mean.DriversKilled)) + facet_wrap(~Year, nrow= 4, ncol= 4) + theme_bw() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), legend.position = &quot;none&quot;) belts.df = belts.df %&gt;% group_by(Year) %&gt;% mutate(summer.s=Month[Month==5], summer.e=Month[Month==9]) ggplot(belts.df, aes(Month, belts.DriversKilled)) + geom_rect(aes(xmin=summer.s, xmax=summer.e, ymin=-Inf, ymax=+Inf), fill = &quot;white&quot;) + geom_path(aes(colour = belts.law, size = belts.PetrolPrice, group = Year), lineend = &quot;round&quot;) + geom_line(data = belts.DriversKilled.bymonth, aes(x = Month, y = mean.DriversKilled)) + facet_wrap(~Year, nrow= 4, ncol= 4) 7.3 Cycle plot Cycle plot make comparions between months easy. Showing bars rather than lines helps focus attenton the specitic years when the seatbelt law was enacted. hline.df &lt;- belts.df %&gt;% group_by(Month) %&gt;% summarize(m.killed = mean(belts.DriversKilled)) ggplot() + geom_path(data = belts.df, aes(x = Year, y = belts.DriversKilled, group = Month, color = belts.law), alpha = .6) + geom_hline( data = hline.df, aes(yintercept = m.killed), colour = &quot;grey15&quot;, size = 1.5) + facet_grid(~Month) + theme(axis.text.x = element_blank()) ggplot() + geom_bar(data = belts.df, aes(x = Year, y = belts.DriversKilled, group = Month, fill = belts.law), alpha = .6, stat = &quot;identity&quot;) + geom_hline( data = hline.df, aes(yintercept = m.killed), colour = &quot;grey15&quot;, size = 1.5) + facet_grid(~Month) + theme(axis.text.x = element_blank()) 7.4 Step graph TODO 7.5 Faceted zoom library(ggforce) ## Examples from: https://cran.r-project.org/web/packages/ggforce/vignettes/Visual_Guide.html ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) + geom_point() + facet_zoom(x = Species == &quot;versicolor&quot;)+ labs(title = &quot;ggforce: facet zoom&quot;) 7.6 Ridge plot https://cran.r-project.org/web/packages/ggridges/vignettes/gallery.html ## Ridge plot library(ggridges) library(ggplot2movies) movies %&gt;% filter(year&gt;1912, length&lt;250) %&gt;% ggplot(aes(x = length, y = year, group = year)) + geom_density_ridges(scale = 10, size = 0.25, rel_min_height = 0.03, alpha=.75) + scale_x_continuous(limits=c(0, 250), expand = c(0.01, 0)) + scale_y_reverse(breaks=c(2000, 1980, 1960, 1940, 1920, 1900), expand = c(0.01, 0)) + theme_ridges() ## Picking joint bandwidth of 6.89 7.7 Stacked area and line graphs Challenges of comparing individual contributions, ease of seeing combined effect Stream plot “Streamgraphs are a generalization of stacked area graphs where the baseline is free. By shifting the baseline, it is possible to minimize the change in slope (or wiggle) in individual series, thereby making it easier to perceive the thickness of any given layer across the data. Byron &amp; Wattenberg describe several streamgraph algorithms in ‘Stacked Graphs—Geometry &amp; Aesthetics1’”2 “A steamgraph is a more aesthetically appealing version of a stacked area chart. It tries to highlight the changes in the data by placing the groups with the most variance on the edges, and the groups with the least variance towards the centre. This feature in conjunction with the centred alignment of each of the contributing areas makes it easier for the viewer to compare the contribution of any of the components across time.” #devtools::install_github(&#39;Ather-Energy/ggTimeSeries&#39;) library(babynames) library(ggTimeSeries) names.df = babynames %&gt;% filter(grepl(&quot;^Jo&quot;, name)) %&gt;% group_by(year, name) %&gt;% tally(wt=n) ##TODO smooth sequence ggplot(names.df, aes(year, y = nn, group = name, fill = name)) + stat_steamgraph() + labs(x=&quot;&quot;, y = &quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + theme_minimal() + theme(legend.position = &quot;none&quot;, axis.text.y=element_blank()) 7.8 Temporal heatmap TODO replace with rain data for SEA from https://www.r-bloggers.com/ggplot2-time-series-heatmaps-revisited-in-the-tidyverse/ # The core idea is to transform the data such that one can # plot &quot;Value&quot; as a function of &quot;WeekOfMonth&quot; versus &quot;DayOfWeek&quot; # and facet this Year versus Month xts_heatmap &lt;- function(x){ data.frame(Date=as.Date(index(x)), x[,1]) %&gt;% setNames(c(&quot;Date&quot;,&quot;Value&quot;)) %&gt;% dplyr::mutate( Year=lubridate::year(Date), Month=lubridate::month(Date), # I use factors here to get plot ordering in the right order # without worrying about locale MonthTag=factor(Month,levels=as.character(1:12), labels=c(&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;),ordered=TRUE), # week start on Monday in my world Wday=lubridate::wday(Date,week_start=1), # the rev reverse here is just for the plotting order WdayTag=factor(Wday,levels=rev(1:7),labels=rev(c(&quot;Mon&quot;,&quot;Tue&quot;,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;,&quot;Sat&quot;,&quot;Sun&quot;)),ordered=TRUE), Week=as.numeric(format(Date,&quot;%W&quot;)) ) %&gt;% # ok here we group by year and month and then calculate the week of the month # we are currently in dplyr::group_by(Year,Month) %&gt;% dplyr::mutate(Wmonth=1+Week-min(Week)) %&gt;% dplyr::ungroup() %&gt;% ggplot(aes(x=Wmonth, y=WdayTag, fill = Value)) + geom_tile(colour = &quot;white&quot;) + facet_grid(Year~MonthTag) + scale_fill_gradient(low=&quot;red&quot;, high=&quot;yellow&quot;) + labs(x=&quot;Week of Month&quot;, y=NULL) } require(quantmod) # Download some Data, e.g. the CBOE VIX quantmod::getSymbols(&quot;^VIX&quot;,src=&quot;yahoo&quot;) ## [1] &quot;VIX&quot; xts_heatmap(Cl(VIX)) + labs(title=&quot;Heatmap of VIX&quot;) http://www.leebyron.com/else/streamgraph/↩ Bostock. http://bl.ocks.org/mbostock/4060954↩ "],
["Connection.html", "Chapter 8 Connection–maps and network plots 8.1 Maps 8.2 US county small multiples 8.3 World migration 8.4 Networks", " Chapter 8 Connection–maps and network plots Test of examples library(tidyverse) rm(list=ls()) Minard migration map 8.1 Maps library(tidyverse) library(ggalt) 8.1.1 Choropleth crimes.df &lt;- data.frame(state = tolower(rownames(USArrests)), USArrests) crimes.l.df &lt;- gather(crimes.df, key = type, value = rate, -state) states_map &lt;- map_data(&quot;state&quot;) ggplot() + geom_cartogram(data=states_map, aes(long, lat, map_id = region), map=states_map) + geom_cartogram(data=crimes.df, aes(fill = Murder, map_id = state), map=states_map) + coord_map(&quot;polyconic&quot;)+ labs(title = &quot;ggalt: map coordinates&quot;) ggplot() + geom_cartogram( data=states_map, aes(long, lat, map_id=region), map = states_map) + geom_cartogram(data=crimes.l.df, aes(fill = rate, map_id=state), map = states_map) + coord_map(&quot;polyconic&quot;) + facet_wrap( ~ type) + labs(title = &quot;ggalt: map coordinates&quot;) ggplot() + geom_cartogram( data=states_map, aes(long, lat, map_id=region), map = states_map) + geom_cartogram(data=crimes.l.df, aes(fill = rate, map_id=state), map = states_map) + coord_map(&quot;polyconic&quot;) + facet_wrap( ~ type) + labs(title = &quot;ggalt: map coordinates&quot;) + theme_void() 8.1.2 County map # Based on example: https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html # TODO replace with poverty or health outcomes data library(tidyverse) library(stringr) library(viridis) ## Clean data # https://www.ers.usda.gov/data-products/county-level-data-sets/download-data/ poverty.df = read_csv(&quot;data/CountyPoverty/Poverty.csv&quot;) names(poverty.df)[1:3] = c(&quot;id&quot;, &quot;state&quot;, &quot;name&quot;) names(poverty.df)[11] = &quot;rate&quot; poverty.df$county = str_replace(poverty.df$name, &quot; County&quot;, &quot;&quot;) poverty.df$county = str_replace(poverty.df$county, &quot; Parish&quot;, &quot;&quot;) poverty.df$county = tolower(poverty.df$county) unemp.df = read_csv(&quot;http://datasets.flowingdata.com/unemployment09.csv&quot;) names(unemp.df) = c(&quot;id&quot;, &quot;state_fips&quot;, &quot;county_fips&quot;, &quot;name&quot;, &quot;year&quot;, &quot;--&quot;, &quot;---&quot;, &quot;---&quot;, &quot;rate&quot;) unemp.df$county = tolower(str_replace(unemp.df$name, &quot; County, [A-Z]{2}&quot;, &quot;&quot;)) unemp.df$county = tolower(gsub(&quot; County, [A-Z]{2}&quot;, &quot;&quot;, unemp.df$name)) unemp.df$county = str_replace(unemp.df$county,&quot;^(.*) parish, ..$&quot;,&quot;\\\\1&quot;) unemp.df$state = str_replace(unemp.df$name, &quot;^.*([A-Z]{2}).*$&quot;, &quot;\\\\1&quot;) ## Use the maps package to convert maps data to a data frame # &quot;county&quot; is a county map of the US county.df &lt;- map_data(&quot;county&quot;, projection = &quot;albers&quot;, parameters = c(39, 45)) names(county.df) &lt;- c(&quot;long&quot;, &quot;lat&quot;, &quot;group&quot;, &quot;order&quot;, &quot;state_name&quot;, &quot;county&quot;) state.df &lt;- map_data(&quot;state&quot;, projection = &quot;albers&quot;, parameters = c(39, 45)) ## Replace state name with state abbreviations county.df$state &lt;- state.abb[match(county.df$state_name, tolower(state.name))] county.df$state_name &lt;- NULL ## Merge county and state shape information with unemployment data unemployment_choropleth.df = county.df %&gt;% inner_join(unemp.df, by = c(&quot;state&quot;, &quot;county&quot;)) poverty_choropleth.df = county.df %&gt;% inner_join(poverty.df, by = c(&quot;state&quot;, &quot;county&quot;)) ggplot(unemployment_choropleth.df, aes(long, lat, group = group)) + geom_polygon(aes(fill = rate), colour = alpha(&quot;white&quot;, 1/2), size = 0.05) + geom_polygon(data = state.df, colour = &quot;grey80&quot;, fill = NA, size = 0.33) + coord_fixed() + theme_minimal() + ggtitle(&quot;US unemployment rate by county&quot;) + scale_fill_viridis(option=&quot;magma&quot;)+ theme_void() ggplot(poverty_choropleth.df, aes(long, lat, group = group)) + geom_polygon(aes(fill = rate), colour = alpha(&quot;white&quot;, 1/2), size = 0.05) + geom_polygon(data = state.df, colour = &quot;grey80&quot;, fill = NA, size = 0.33) + coord_fixed() + theme_minimal() + ggtitle(&quot;US poverty rate by county&quot;) + scale_fill_viridis(option=&quot;magma&quot;)+ theme_void() 8.2 US county small multiples 8.3 World migration TODO Add plot with migration data from kaggle 8.4 Networks https://www.data-imaginist.com/2017/ggraph-introduction-layouts/ 8.4.1 World migration network TODO adjust to reflect migration data Based on https://datascience.blog.wzb.eu/2018/05/31/three-ways-of-visualizing-a-graph-on-a-map/ ## [1] TRUE ## [1] TRUE Examples from: https://github.com/thomasp85/ggraph library(ggraph) # ggplot extension library(igraph) # For network calculations # Graph of highschool friendships graph &lt;- graph_from_data_frame(highschool) V(graph)$Popularity &lt;- degree(graph, mode = &#39;in&#39;) # Network faceted by year ggraph(graph, layout = &#39;kk&#39;) + geom_edge_fan(aes(alpha = ..index..), show.legend = FALSE) + geom_node_point(aes(size = Popularity)) + facet_edges(~year) + theme_graph(foreground = &#39;steelblue&#39;, fg_text_colour = &#39;white&#39;) 8.4.2 Hierarchy link to treemap ## TODO Convert to migration data library(ggraph) flare.df = ggraph::flare graph &lt;- graph_from_data_frame(flare.df$edges, vertices = flare.df$vertices) circle.plot = ggraph(graph, &#39;circlepack&#39;, weight = &#39;size&#39;) + geom_node_circle(aes(fill = depth), size = 0.25, n = 50) + coord_fixed() + theme_graph() + theme(legend.position = &quot;none&quot;, plot.margin=unit(c(0,0,0,0), &quot;cm&quot;)) ## Data describe the class hiearchy of the Flare visualization library tree.plot = ggraph(graph, layout = &#39;treemap&#39;, weight = &#39;size&#39;) + geom_node_tile(aes(fill = depth)) + theme_graph() + theme(legend.position = &quot;none&quot;, plot.margin=unit(c(0,0,0,0), &quot;cm&quot;)) ## Same basic data plotted as a circular tree round_dendro.plot = ggraph(graph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_edge_diagonal() + geom_node_point(aes(filter = leaf)) + coord_fixed() + theme_graph() + theme(legend.position = &quot;none&quot;, plot.margin=unit(c(0,0,0,0), &quot;cm&quot;)) ggarrange(circle.plot, tree.plot, round_dendro.plot, nrow=1, ncol = 3, align = &quot;hv&quot;) "],
["Tables.html", "Chapter 9 Graphical tables–interactive tables, highlights, and sparklines 9.1 Heatmap table 9.2 Table lens with a integrated bar 9.3 Sparkline", " Chapter 9 Graphical tables–interactive tables, highlights, and sparklines library(tidyverse) library(DT) datatable(mpg, options = list(pageLength = 5), filter = &#39;top&#39;) 9.1 Heatmap table From https://rstudio.github.io/DT/010-style.html df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE))) brks &lt;- quantile(df, probs = seq(.05, .95, .05), na.rm = TRUE) clrs &lt;- round(seq(255, 40, length.out = length(brks) + 1), 0) %&gt;% {paste0(&quot;rgb(255,&quot;, ., &quot;,&quot;, ., &quot;)&quot;)} datatable(df) %&gt;% formatStyle(names(df), backgroundColor = styleInterval(brks, clrs)) 9.2 Table lens with a integrated bar datatable(df) %&gt;% formatStyle(names(df), background = styleColorBar(range(df), &#39;lightblue&#39;), backgroundSize = &#39;98% 88%&#39;, backgroundRepeat = &#39;no-repeat&#39;, backgroundPosition = &#39;center&#39;) 9.3 Sparkline https://leonawicz.github.io/HtmlWidgetExamples/ex_dt_sparkline.html "],
["Polishing.html", "Chapter 10 Highlighting, annotating, and polishing graphs 10.1 Highlighting datapoints to make a point 10.2 Labeling and annotation 10.3 Position legend 10.4 Color 10.5 Themes and theme options 10.6 Saving and printing plots to include in documents", " Chapter 10 Highlighting, annotating, and polishing graphs library(tidyverse) library(ggrepel) rm(list=ls()) mtcars.df = mtcars All graphs should have axis labels with units Legends should have titles Titles are often included in the figure caption and not the graph Annotations can label points and tell a story Annotations can label lines better than legends Labels and annotations added as another layer Create a plot Add axis labels, with units Annotate to tell a story Select and appropriate color palette Place the legend inside the graph Change the theme to increase the data to ink ratio Check that changing the theme did not undo your legend placement Save as a 5X5 inch image in a format to minimize blur 10.1 Highlighting datapoints to make a point h.mtcars.df = mtcars.df %&gt;% mutate(highlight = if_else(cyl==8, &quot;yes&quot;, &quot;no&quot;)) ggplot(h.mtcars.df, aes(x = as.factor(cyl), fill = highlight)) + geom_bar(alpha = .6) + scale_fill_manual(values = c(&quot;yes&quot;=&quot;darkred&quot;, &quot;no&quot;=&quot;gray15&quot;), guide = FALSE) h.mtcars.df = mtcars.df %&gt;% mutate(highlight = if_else(mpg&gt;24 &amp;wt&gt;3, &quot;yes&quot;, &quot;no&quot;)) ggplot(h.mtcars.df, aes(x = wt, y = mpg, colour = highlight)) + geom_point() + scale_color_manual(values = c(&quot;yes&quot;=&quot;darkred&quot;, &quot;no&quot;=&quot;gray60&quot;), guide = FALSE) 10.2 Labeling and annotation 10.2.1 Annotating data ## Text and rectangle annotation ggplot(mtcars.df, aes(disp, mpg, color = as.factor(cyl))) + annotate(geom = &quot;rect&quot;, ymin = 20, ymax = 35, xmin = 65, xmax = 155, fill = &quot;grey65&quot;, alpha = .5) + annotate(geom = &quot;text&quot;, x = 115, y = 36, label = &quot;High-power cars&quot; ) + geom_point()+ labs(x = &quot;Displacement (cubic inches)&quot;, y = &quot;Efficiency (mile per gallon)&quot;, title = &quot;Efficiency and engine size&quot;, colour = &quot;Number of cylinders&quot;) ## Encircle pooints library(ggalt) ggplot(mtcars, aes(disp, mpg))+ geom_point()+ geom_encircle(data=filter(mtcars, mpg&gt;24), s_shape=0.75, expand=0.05) + labs(title = &quot;ggalt: encircle annotation&quot;) ## Regresion equation library(ggpmisc) # For stat_poly_eq for equation annotation # https://cran.r-project.org/web/packages/ggpmisc/vignettes/user-guide-1.html formula &lt;- y ~ poly(x, degree = 1, raw = TRUE) ggplot(mtcars, aes(x=disp, y=mpg)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = formula) + stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = &quot;~~~~&quot;)), formula = formula, parse = TRUE, coef.digits = 2, label.x = 200, label.y = 30) 10.2.2 Time series with lines labeled Based on example from: https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html library(ggrepel) 10.2.3 Labelling lines, bars, points, and select points library(ggrepel) mtcars.df = mtcars mtcars.df$name = row.names(mtcars.df) ## Lines with labels rather than legend ggplot(Orange, aes(age, circumference, color = Tree)) + geom_line() + geom_text_repel(data = filter(Orange, age == max(age)), aes(label = paste(&quot;Tree&quot;, Tree)), size = 4, nudge_x = 45, segment.color = NA ) + coord_cartesian(xlim = c(min(Orange$age), max(Orange$age) + 90)) + theme(legend.position = &quot;none&quot;) + labs(x = &quot;Age (days)&quot;, y = &quot;Circumference (mm)&quot;) count.mtcars.df = mtcars.df %&gt;% mutate(cyl = as.factor(cyl), am = as.factor(am)) %&gt;% group_by(am, cyl) %&gt;% summarise(count = n()) %&gt;% mutate(label.pos = cumsum(count) - (0.1 * count)) ggplot(count.mtcars.df, aes(x = cyl, y = count, fill = am, label = count)) + geom_bar(stat = &quot;identity&quot;) + geom_text(size = 3, position = position_stack(vjust = 0.5)) ## Annotated point ggplot(mtcars.df, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ geom_text_repel(aes(label = name), size = 2, show.legend = FALSE) ## Subset annotated ggplot(mtcars.df, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ geom_text_repel(data = mtcars.df %&gt;% filter(mpg&gt;30), aes(label = name), size = 2, show.legend = FALSE) 10.2.4 Meaningful symbols ggplot(mtcars, aes(disp, mpg, colour = as.factor(am), shape = as.factor(am))) + geom_point(size = 8) + scale_color_manual(values = c(&quot;0&quot; = &quot;blue&quot;, &quot;1&quot; = &quot;red&quot;)) + scale_shape_manual(values = c(&quot;0&quot; = &quot;\\u2642&quot;, &quot;1&quot; = &quot;\\u2640&quot;)) + labs(title = &quot;custom shape: Male/Female&quot;) 10.2.5 Annotating with an inset plot library(tidyverse) diamonds.df = diamonds ## Specify area of the plot to highlight xmin = .8; xmax = 1.2; ymin = 2000; ymax = 7500 higlight.df = diamonds.df %&gt;% filter(carat&gt;xmin&amp;carat&lt;xmax, price&gt;ymin&amp;price&lt;ymax) overall.plot = ggplot(diamonds.df, aes(carat, price))+ geom_point(alpha = .3, size = .3)+ geom_rect(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = &quot;transparent&quot;, color = &quot;grey60&quot;) inset.plot = ggplot(higlight.df, aes(carat, price))+ geom_point(alpha = .3, size = .2) + labs(x = &quot;&quot;, y = &quot;&quot;) + theme_minimal() ## Create custom annotation and add to inset.grob &lt;- ggplotGrob(inset.plot ) overall.plot + annotation_custom(grob = inset.grob, xmin = 3.5, xmax = 5.2, ymin = 250, ymax = 16500) 10.2.6 Labels on lines library(ggpmisc) # For stat_poly_eq for equation annotation formula &lt;- y ~ poly(x, 1, raw = TRUE) ggplot(mtcars, aes(x=disp, y=mpg)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = formula) + stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = &quot;~~~~&quot;)), formula = formula, parse = TRUE, coef.digits = 2, label.x = 200, label.y = 30) 10.2.7 Adding and removing labels: title, axis labels, and facet labels library(tidyverse) library(ggalt) library(ggrepel) # Add names of cars to dataframe mtcars.df = mtcars mtcars.df$name = row.names(mtcars.df) ## Axis labels, title, and legend ggplot(mtcars.df, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ labs(x = &quot;Displacement (cubic inches)&quot;, y = &quot;Efficiency (mile per gallon)&quot;, title = &quot;Efficiency and engine size&quot;, colour = &quot;Number of cylinders&quot;) ## Subtitle and caption ggplot(mtcars.df, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ labs(x = &quot;Displacement (cubic inches)&quot;, y = quote(alpha + beta + frac(delta, theta)), title = &quot;Efficiency and engine size&quot;, subtitle = &quot;mtcars data&quot;, caption = &quot;Caption if needed&quot;, colour = &quot;Number of cylinders&quot;) ## Remove labels ggplot(mtcars.df, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ labs(x = &quot;&quot;, y = &quot;&quot;) ## Facet labels cyl_names &lt;- as_labeller(c(&quot;4&quot; = &quot;Four&quot;, &quot;6&quot; = &quot;Six&quot;, &quot;8&quot; = &quot;Eight&quot;)) ggplot(mtcars.df, aes(wt, mpg))+ geom_point() + facet_grid(cyl ~ ., labeller = as_labeller(cyl_names)) 10.3 Position legend # Place legend at bottom ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme(legend.position = &quot;bottom&quot;) # Place legend in graph ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme(legend.position = c(0.9, 0.8)) 10.3.1 Remove one or more legends ggplot(mtcars.df, aes(wt, mpg, colour = cyl, size = hp))+ geom_point() ## Remove legend for single mapping ggplot(mtcars.df, aes(wt, mpg, colour = cyl, size = hp))+ geom_point()+ guides(colour=FALSE) ggplot(mtcars.df, aes(wt, mpg, colour = cyl, size = hp))+ geom_point()+ scale_colour_continuous(guide=FALSE) ## Remove legend for a single layer ggplot(mtcars.df, aes(wt, mpg, colour = cyl, size = hp))+ geom_point(show.legend=FALSE) # Remove all legend ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme(legend.position = &quot;none&quot;) 10.3.2 Setting limits on axis and position of graph r ## Change axis limits to focus on part of data ggplot(mtcars.df, aes(wt, mpg))+ geom_point() r ggplot(mtcars.df, aes(wt, mpg))+ geom_point()+ lims(x = c(3, 4)) ## Warning: Removed 16 rows containing missing values ## (geom_point). r ggplot(mtcars.df, aes(wt, mpg))+ geom_point()+ scale_x_continuous(limits = c(3, 4)) ## Warning: Removed 16 rows containing missing values ## (geom_point). 10.3.3 Adjust margin between points and edge of plot area ggplot(mtcars.df, aes(wt, mpg))+ geom_point() + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) 10.4 Color The palette of colors that is scaled to the data is set separately for “fill” and for “colour” Color palettes that work for discrete variables (e.g., factors) may not work for continuous, numeric variables Color palette design is complex and choice depends on Number of categories in the data Ability to support black and white printing Ability to support color-deficient vision Size of the space being colored Small areas, such as points, benefit from saturated color, and large areas, such a bars are better with less intense color. Great resources to explain the basis of the Brewer, Viridis, and ptol palettes: http://colorbrewer2.org/#type=sequential&amp;scheme=BuGn&amp;n=3 https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html https://personal.sron.nl/~pault/ 10.4.1 Resources to explain the basis form color choice Brewer, Viridis, and ptol palettes http://colorbrewer2.org/#type=sequential&amp;scheme=BuGn&amp;n=3 https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html https://personal.sron.nl/~pault/ 10.4.2 Large and small area colors 10.4.3 Color for large and small areas What works for large areas of color might not work for small areas 10.4.4 Continuous color scales # Scales made for factors do not work with continuous variables ggplot(mtcars, aes(disp, mpg, color = mpg))+geom_point()+ labs(title = &quot;gplot: Default&quot;) ggplot(mtcars, aes(disp, mpg, color = mpg))+geom_point()+ scale_color_viridis(discrete = FALSE) + labs(title = &quot;viridis: viridis&quot;) ##TODO Add parula 10.4.5 Discrete color mappings ggplot(diamonds, aes(x = color, fill = cut)) + geom_bar() + scale_fill_hue()+ labs(title = &quot;ggplot: Default&quot;) ggplot(diamonds, aes(x = color, fill = cut)) + geom_bar() + scale_fill_brewer(palette = &quot;Accent&quot;) + labs(title = &quot;Brewer: Accent&quot;) 10.5 Themes and theme options Turn off many theme elements ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position=&quot;none&quot;, panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), plot.background=element_blank()) 10.5.1 Remove chart details Useful for plotting graphs and networks and maps ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position=&quot;none&quot;, panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), plot.background=element_blank()) 10.5.2 Predefined themes adjust many elements library(hrbrthemes) # Precise font and minimal grid library(ggthemes) # Huge variety of themes including Tufte and Few library(xkcd) # Plots in the xkcd comic style An engaging and fun theme ftp://200.236.31.7/CRAN/web/packages/xkcd/vignettes/xkcd-intro.pdf ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme_void() ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + theme_minimal(base_size = 18, base_family = &quot;Avenir&quot;) #ipsum, latin for neat library(hrbrthemes) ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + scale_colour_ipsum() + theme_ipsum() ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() + scale_color_fivethirtyeight() + theme_fivethirtyeight() ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ scale_color_few() + theme_few() ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ geom_rangeframe()+ theme_tufte() order of application matters ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ scale_colour_ipsum() + theme_ipsum() + theme(legend.position = c(.85, .8)) ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ scale_colour_ipsum() + theme_ipsum() + theme(legend.position = c(.85, .8))+ theme_ipsum() ggplot(mtcars.df, aes(wt, mpg)) + geom_point()+ theme(axis.title.y = element_text(margin = margin(t = 10, r = 10, b = 80, l = 20))) 10.5.3 Ordering theme layers # Sets theme then adjusts legend ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ theme_ipsum()+ theme(legend.position = c(.85, .8)) # Adjusts legend, but the overrides with setting theme ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point()+ theme(legend.position = c(.85, .8))+ theme_ipsum() ## To set for all plots theme_set(theme_few()) ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() theme_set(theme_gray()) # Returns to default theme 10.5.4 Pre-set theme options 10.5.5 Themes form other packages ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in grid.Call(C_textBounds, ## as.graphicsAnnot(x$label), x$x, x$y, : font family ## &#39;Arial Narrow&#39; not found in PostScript font database ## Warning in align_plots(plotlist = plots, align = align, ## axis = axis): Complex graphs cannot be vertically ## aligned unless axis parameter is set properly. Placing ## graphs unaligned. ## Warning in align_plots(plotlist = plots, align = align, ## axis = axis): Graphs cannot be horizontally aligned, ## unless axis parameter set. Placing graphs unaligned. 10.6 Saving and printing plots to include in documents For formal documents save graphs and import. Do not cut and paste from RStudio Saving and importing provides consistent physical size, resolution, and aspect ratio: DO NOT re-scale in the document Vector formats (PDF, SVG) Provide crisp images even when zoomed in and raster File size scales with number of data points Raster formats (PNG, TIFF) The dpi (dots per inch) defines the resolution of the image File size scales with dimensions of graph and dpi 10.6.1 PNG, JPEG, PDF, and SVG mpg.plot = ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() ggsave(filename = &quot;mpg.png&quot;, device = &quot;png&quot;, plot = mpg.plot, height = 4, width = 5, units = &quot;in&quot;, dpi = 300) ggsave(filename = &quot;mpg.pdf&quot;, device = &quot;pdf&quot;, plot = mpg.plot, height = 4, width = 5, units = &quot;in&quot;) library(svglite) ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() mpg.plot = ggplot(mtcars, aes(disp, mpg, color = as.factor(cyl))) + geom_point() ## Possible formats: # &quot;eps&quot;, &quot;ps&quot;, &quot;tex&quot; (pictex), &quot;pdf&quot;, &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;svg&quot; or &quot;wmf&quot; (windows only) ## PNG--raster format that looks blurry at low resolution ggsave(filename = &quot;mpg.png&quot;, device = &quot;png&quot;, plot = mpg.plot, height = 4, width = 5, units = &quot;in&quot;, dpi = 300) ## PDF--vector format that remains sharp even when zoomed in ggsave(filename = &quot;mpg.pdf&quot;, device = &quot;pdf&quot;, plot = mpg.plot, height = 4, width = 5, units = &quot;in&quot;) ## SVG--vector format that remains sharp even when zoomed in ggsave(filename = &quot;mpg.svg&quot;, device = &quot;svg&quot;, plot = mpg.plot, height = 4, width = 5, units = &quot;in&quot;) ## Saving many plots into a single file # Calculate the number of pages with 9 panels per page n_pages &lt;- ceiling( length(levels(diamonds$color)) * length(levels(diamonds$cut:diamonds$clarity)) / 9 ) pdf(&quot;multipage.pdf&quot;) for (i in seq_len(n_pages)) { p= ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.1) + facet_grid_paginate(color~cut:clarity, ncol = 3, nrow = 3, page = i)+ labs(title = &quot;ggforce: facet pagination&quot;) print(p) } dev.off() ## quartz_off_screen ## 2 10.6.2 Combining multiple graphs for publication library(ggpubr) displ.plot = ggplot(mtcars, aes(disp, mpg)) + geom_point() hp.plot = ggplot(mtcars, aes(hp, mpg)) + geom_point() combined.plot = ggarrange(displ.plot, hp.plot, nrow=1, ncol = 2, align = &quot;hv&quot;) combined.plot 10.6.3 Faceted pagination library(ggforce) ## Examples from: https://cran.r-project.org/web/packages/ggforce/vignettes/Visual_Guide.html ggplot(diamonds, aes(carat, price)) + geom_point(alpha = 0.1) + facet_grid_paginate(color~cut:clarity, ncol = 3, nrow = 3, page = 1)+ labs(title = &quot;ggforce: facet pagination&quot;) "],
["Interaction.html", "Chapter 11 Interaction–zoom, annotate, highlight", " Chapter 11 Interaction–zoom, annotate, highlight library(tidyverse) library(ggiraph) mpg.plot = ggplot(mpg, aes( x = displ, y = cty, color = hwy))+ geom_point_interactive(aes(tooltip = model), size = 2) + labs(title = &quot;ggiraph: interactive plots&quot;) ggiraph(code = print(mpg.plot)) "],
["shinyadvanced-interactive-graphics.html", "Chapter 12 Shiny–Advanced interactive graphics A.1 Data sources A.2 Visualization resources", " Chapter 12 Shiny–Advanced interactive graphics library(tidyverse) A.1 Data sources https://www.kaggle.com A.2 Visualization resources Final commments at end. "],
["references.html", "References", " References "]
]
